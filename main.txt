"""
RMA Management Server

This software is designed to automate and manage the Return Merchandise Authorization (RMA) process 
for customer returns, including integration with Zendesk for fetching customer and organization details. 
The software communicates with an Excel database for RMA data storage and uses the Zendesk API to fetch 
customer and organization data based on email, update the information, and generate RMA numbers in 
the Excel spreadsheet.

The program contains the following main components:
1. `Customer` class: Handles customer details like name, email, company, and address.
2. `ZendeskClient` class: Interfaces with Zendesk API for fetching user and organization details.
3. `RMAmanagement` class: Manages RMA creation and updates Excel sheets with RMA-related information.
4. `Timestamp` class: Handles date formatting and retrieval.
5. `Main` function: Orchestrates the flow of data between classes, handling RMA creation based on customer details from Zendesk.

Key functionalities:
- Fetch customer details using their email through the Zendesk API.
- Extract organization details and address information from Zendesk.
- Store RMA details in an Excel workbook, updating it with incremented RMA numbers and customer information.
- Use an easy-to-follow console-based interaction for confirming user information and generating RMAs.

Best Practices Implemented:
- Encapsulation through classes.
- Property decorators for safe data handling.
- Error handling and exception management.
- Separation of concerns for better maintainability.
- Usage of static methods for reusable utility functions.
"""

import requests
import openpyxl
from openpyxl import Workbook
from datetime import datetime
from openpyxl.styles import NamedStyle

# Global dictionaries for storing user and address information
user_info_dict = {}
address_dict = {}

class Customer:
    """
    Class to represent a customer with properties such as ID, contact name, email, phone, 
    company, and address details.
    """
    def __init__(self):
        self._customerID = None
        self._customerContactName = None
        self._customerEmail = None
        self._customerPhoneNumber = None
        self._customerCompanyName = None
        self._customerStreetInfo = None
        self._customerCity = None
        self._customerState = None
        self._customerZipCode = None
        self._customerCountry = None

    # Getters and Setters using @property for data validation and security.
    @property
    def customerID(self):
        return self._customerID

    @customerID.setter
    def customerID(self, value):
        # Add validation logic if necessary
        self._customerID = value

    @property
    def customerContactName(self):
        return self._customerContactName

    @customerContactName.setter
    def customerContactName(self, value):
        self._customerContactName = value

    @property
    def customerEmail(self):
        return self._customerEmail

    @customerEmail.setter
    def customerEmail(self, value):
        self._customerEmail = value

    @property
    def customerPhoneNumber(self):
        return self._customerPhoneNumber

    @customerPhoneNumber.setter
    def customerPhoneNumber(self, value):
        self._customerPhoneNumber = value

    @property
    def customerCompanyName(self):
        return self._customerCompanyName

    @customerCompanyName.setter
    def customerCompanyName(self, value):
        self._customerCompanyName = value

    @property
    def customerStreetInfo(self):
        return self._customerStreetInfo

    @customerStreetInfo.setter
    def customerStreetInfo(self, value):
        self._customerStreetInfo = value

    @property
    def customerCity(self):
        return self._customerCity

    @customerCity.setter
    def customerCity(self, value):
        self._customerCity = value

    @property
    def customerState(self):
        return self._customerState

    @customerState.setter
    def customerState(self, value):
        self._customerState = value

    @property
    def customerZipCode(self):
        return self._customerZipCode

    @customerZipCode.setter
    def customerZipCode(self, value):
        self._customerZipCode = value

    @property
    def customerCountry(self):
        return self._customerCountry

    @customerCountry.setter
    def customerCountry(self, value):
        self._customerCountry = value

    def __str__(self):
        """
        Returns a string representation of the customer object for easy debugging.
        """
        return (f"Customer ID: {self.customerID}, Contact Name: {self.customerContactName}, "
                f"Email: {self.customerEmail}, Phone: {self.customerPhoneNumber}, "
                f"Company: {self.customerCompanyName}, Street: {self.customerStreetInfo}, "
                f"City: {self.customerCity}, Zip: {self.customerZipCode}, Country: {self.customerCountry}")

class ZendeskClient:
    """
    Class to interact with the Zendesk API to fetch customer and organization details.
    """
    def __init__(self, subdomain, email, password):
        self.subdomain = subdomain
        self.email = email
        self.password = password
        self.base_url = f'https://{subdomain}.zendesk.com/api/v2/'

    def test_api_connection(self):
        """
        Tests the connection to the Zendesk API by fetching current user's details.
        """
        url = self.base_url + 'users/me.json'
        try:
            response = requests.get(url, auth=(self.email, self.password))
            if response.status_code == 200:
                print("Successfully connected to Zendesk API")
                return True
            else:
                print(f"Failed to connect. Status code: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")
            return False

    def search_user_by_email(self, email, customer_instance):
        """
        Searches for a user in Zendesk by their email and updates the provided customer instance with user details.
        """
        global user_info_dict
        url = self.base_url + f'users/search.json?query=email:{email}'
        try:
            response = requests.get(url, auth=(self.email, self.password))
            if response.status_code == 200:
                users = response.json().get('users', [])
                if users:
                    user = users[0]  # Assuming the first match is sufficient
                    user_info_dict['id'] = user.get('id')
                    customer_instance.customerID = user_info_dict['id']

                    user_info_dict['name'] = user.get('name')
                    customer_instance.customerContactName = user_info_dict['name']

                    user_info_dict['email'] = user.get('email')
                    customer_instance.customerEmail = user_info_dict['email']

                    user_info_dict['phone'] = user.get('phone', 'No phone number')
                    customer_instance.customerPhoneNumber = user_info_dict['phone']

                    return users
                else:
                    print("No users found.")
            else:
                print(f"Failed to retrieve users. Status code: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")

        return None

    def get_organization_address(self, organization_id, customer_instance):
        """
        Fetches the organization details from Zendesk by organization ID and updates the customer's address information.
        """
        global address_dict
        url = self.base_url + f'organizations/{organization_id}.json'
        try:
            response = requests.get(url, auth=(self.email, self.password))
            if response.status_code == 200:
                organization = response.json().get('organization', {})
                customer_instance.customerCompanyName = organization.get('name')

                full_address = organization.get('details', '')
                address_parts = full_address.split(', ')

                # Extracting address components
                if len(address_parts) > 2:
                    state_zip = address_parts[2].split(' ')
                    address_dict['address'] = address_parts[0]
                    customer_instance.customerStreetInfo = address_dict['address']

                    address_dict['city'] = address_parts[1]
                    customer_instance.customerCity = address_dict['city']

                    address_dict['state'] = state_zip[0] if len(state_zip) > 0 else None
                    customer_instance.customerState = address_dict['state']

                    address_dict['zip_code'] = state_zip[1] if len(state_zip) > 1 else None
                    customer_instance.customerZipCode = address_dict['zip_code']

                    address_dict['country'] = address_parts[3] if len(address_parts) > 3 else None
                    customer_instance.customerCountry = address_dict['country']

                return full_address
            else:
                print(f"Failed to retrieve organization. Status code: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")

        return None

class RMAmanagement:
    """
    Class to handle the creation and management of RMA records, 
    including updating an Excel database with RMA and customer information.
    """
    def __init__(self):
        self._RMAID = None
        self._RMAcategory = None
        self._DateCalled = None
        self._CustomerComplaint = None
        self._CadexReply = None
        self._RMAcomments = None
        self._RMAsignature = None
        self._RMAcondition = None
        self._Product = None
        self._Status = None
        self._DecontaminationStatus = None
        self._ProductSerialNumber = None

    # Getters and Setters for RMA details
    @property
    def RMAID(self):
        return self._RMAID

    @RMAID.setter
    def RMAID(self, value):
        self._RMAID = value

    @property
    def RMAcategory(self):
        return self._RMAcategory

    @RMAcategory.setter
    def RMAcategory(self, value):
        self._RMAcategory = value

    # Additional properties omitted for brevity...

    def update_excel_with_rma_info(self, RMA_instance, customer_instance):
        """
        Updates the Excel sheet with RMA information, incrementing the RMA number, 
        and inserting customer and product details into the appropriate fields.
        """
        file_path = 'C:/Users/coleg/Desktop/SRNdb.xlsm'
        sheet_name = 'Customer_DB'

        try:
            # Check for file access
            with open(file_path, "a"):
                pass
        except PermissionError:
            print("Excel file is open. Please close it and try again.")
            return

        try:
            # Open workbook and find the relevant sheet
            workbook = openpyxl.load_workbook(file_path, keep_vba=True)
            if sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
            else:
                raise ValueError(f"Sheet '{sheet_name}' not found.")

            # Find the highest RMA number
            max_rma = 0
            rma_column = None
            for i, cell in enumerate(sheet[1]):
                if str(cell.value).strip() == "SRN":
                    rma_column = i + 1
                    break

            if rma_column is None:
                raise ValueError("Required 'RMAnumber' column not found")

            for row in sheet.iter_rows(min_row=2, min_col=rma_column, max_col=rma_column):
                cell_value = row[0].value
                if cell_value and isinstance(cell_value, int):
                    max_rma = max(max_rma, cell_value)

            # Increment and update RMA number in the next available row
            next_rma = max_rma + 1
            next_row = max_rma + 1  # Assumed logic for row determination
            sheet.cell(row=next_row, column=1).value = next_rma
            # Populate additional details (product, complaints, etc.)

            # Save the workbook after making changes
            workbook.save(file_path)

        except PermissionError:
            print("Permission denied. The Excel sheet might be open. Please close it.")
        except Exception as e:
            print(f"An error occurred: {e}")
            raise

class Timestamp:
    """
    Class to manage timestamps and provide date formatting for Excel.
    """
    def __init__(self):
        now = datetime.now()
        self.day = now.day
        self.month = now.month
        self.year = now.year

    def get_current_date(self):
        """Returns the current date."""
        return datetime.now()

    @staticmethod
    def get_excel_date_style():
        """Returns a NamedStyle for Excel date formatting."""
        return NamedStyle(name='custom_date_style', number_format='DD-MMM-YYYY')

def main():
    """
    Main function orchestrates the process of fetching customer information from Zendesk,
    confirming details with the user, and creating/updating RMAs in the Excel database.
    """
    subdomain = 'company'
    email = 'test@company.com'
    password = 'password_here'
    
    client = ZendeskClient(subdomain, email, password)

    if not client.test_api_connection():
        print("Failed to establish connection to Zendesk. Exiting.")
        return

    customer_instance = Customer()
    RMA_instance = RMAmanagement()

    user_email = 'dprieur@gettel.com'
    users = client.search_user_by_email(user_email, customer_instance)

    if users:
        full_address = client.get_organization_address(users[0]['organization_id'], customer_instance)
        print(f"User Info: {customer_instance}, Full Address: {full_address}")

        if input("Is the information correct? (Y/N): ").upper() == 'Y':
            try:
                RMA_instance.update_excel_with_rma_info(RMA_instance, customer_instance)
                print(f"RMA Created: {RMA_instance}")
            except Exception as e:
                print(f"Error updating Excel: {e}")
        else:
            print("Please update the information on Zendesk or retry.")
    else:
        print("No users found.")

if __name__ == "__main__":
    main()
